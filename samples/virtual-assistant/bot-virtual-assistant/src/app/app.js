// Import required bot services.
// See https://aka.ms/bot-services to learn more about the different parts of a bot.
const {
  MemoryStorage,
} = require('botbuilder');

const { Application, ActionPlanner, OpenAIModel, PromptManager } = require("@microsoft/teams-ai");

const path = require("path");
const config = require("../config");

// Read botFilePath and botFileSecret from .env file.
const ENV_FILE = path.join(__dirname, '.env');
require('dotenv').config({ path: ENV_FILE });

console.log("azureOpenAIKey:" + config.azureOpenAIKey);
console.log(config.azureOpenAIEndpoint);
console.log(config.azureOpenAIDeploymentName);

// Create AI components
const model = new OpenAIModel({
  azureApiKey: config.azureOpenAIKey,
  azureDefaultDeployment: config.azureOpenAIDeploymentName,
  azureEndpoint: config.azureOpenAIEndpoint,
  azureApiVersion: '2024-02-15-preview',

  useSystemMessages: true,
  logRequests: true,
});

const prompts = new PromptManager({
  promptsFolder: path.join(__dirname, "../prompts"),
});

const planner = new ActionPlanner({
  model,
  prompts,
  defaultPrompt: 'sequence'
});

// Define storage and application
const storage = new MemoryStorage();

const app = new Application({
  storage,
  ai: {
    planner,
  },
});

async function sendToSkill(context, targetSkill) {
  // NOTE: Always SaveChanges() before calling a skill so that any activity generated by the skill
  // will have access to current accurate state.
  await conversationState.saveChanges(context, true);

  // Create a conversationId to interact with the skill and send the activity
  const skillConversationId = await conversationIdFactory.createSkillConversationIdWithOptions({
    fromBotOAuthScope: context.turnState.get(context.adapter.OAuthScopeKey),
    fromBotId: config.botId,
    activity: context.activity,
    botFrameworkSkill: targetSkill
  });

  // Route the activity to the skill
  const response = await skillClient.postActivity(
    config.botId,
    targetSkill.appId,
    targetSkill.skillEndpoint,
    skillsConfig.skillHostEndpoint,
    skillConversationId,
    context.activity
  );

  // Check response status
  if (!(response.status >= 200 && response.status <= 299)) {
    throw new Error(`[RootBot]: Error invoking the skill id: "${targetSkill.id}" at "${targetSkill.skillEndpoint}" (status is ${response.status}). \r\n ${response.body}`);
  }
}

// Register action handlers for Echo message.
app.ai.action('EchoBot', async (context, state) => {
  try {
    // await context.sendActivity(`[Echo Message]`);

    // Set active skill
    await activeSkillProperty.set(context, targetSkill);

    // Send the activity to the skill
    await sendToSkill(context, targetSkill);

    // return `Echo Message.........`;
  }
  catch (error) {
    console.log(error);
  }
});

app.ai.action('TranslationBot', async (context, state) => {
  try {
    // await context.sendActivity(`[AI Bot]`);

    // Set active skill
    await activeSkillProperty.set(context, targetAISkill);

    // Send the activity to the skill
    await sendToSkill(context, targetAISkill);

    // return `AI Bot........`;
  }
  catch (error) {
    console.log(error);
  }
});

module.exports = app;
